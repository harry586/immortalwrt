name: "Universal Firmware Builder"

on:
  # 仅手动触发，完全控制编译过程
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      
      source_branch:
        description: '源码分支 (auto=自动推荐)'
        required: true
        default: 'auto'
        type: string
        
      config_profile:
        description: '设备配置文件'
        required: true
        type: choice
        options:
          - configs/.config_rt-ac42u_immortalwrt
          - configs/.config_rt-acrh17_lede
          - configs/.config_x86-64_openwrt
          - configs/.config_default
        default: 'configs/.config_rt-ac42u_immortalwrt'
      
      enable_custom_features:
        description: '启用自定义功能'
        required: false
        default: true
        type: boolean

env:
  TZ: "Asia/Shanghai"
  BUILD_TIMEOUT: 180

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    # ======================
    # 阶段1：环境准备
    # ======================
    - name: "📥 检出配置仓库"
      uses: actions/checkout@v4
      with:
        path: config-repo

    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        cd config-repo
        echo "读取源码库配置..."
        
        if [ ! -f "repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          exit 1
        fi
        
        REPO_CONFIG=$(cat repositories.json)
        PRESET="${{ github.event.inputs.source_preset }}"
        
        # 获取源码URL和分支
        SOURCE_URL=$(echo "$REPO_CONFIG" | jq -r ".$PRESET.url")
        DESCRIPTION=$(echo "$REPO_CONFIG" | jq -r ".$PRESET.description")
        
        # 分支处理
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(echo "$REPO_CONFIG" | jq -r ".$PRESET.recommended_branch")
          echo "自动选择推荐分支: $BRANCH"
        fi
        
        echo "源码库: $PRESET - $DESCRIPTION"
        echo "仓库URL: $SOURCE_URL"
        echo "使用分支: $BRANCH"
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV

    - name: "🧹 准备构建环境"
      run: |
        echo "安装编译依赖..."
        sudo apt-get update
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip \
          python3-serial python3-setuptools rsync unzip zlib1g-dev file wget \
          jq

    # ======================
    # 阶段2：源码获取和初始化
    # ======================
    - name: "📥 获取源代码"
      run: |
        echo "克隆源码仓库: ${{ env.SOURCE_URL }}"
        git clone --depth 1 \
          --branch "${{ env.SOURCE_BRANCH }}" \
          "${{ env.SOURCE_URL }}" \
          source

    - name: "🔧 源码初始化"
      run: |
        cd source
        echo "初始化源码..."
        
        # 更新feeds
        if [ -f "feeds.conf" ] || [ -f "feeds.conf.default" ]; then
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "✅ Feeds更新完成"
        fi

    # ======================
    # 阶段3：自定义功能集成
    # ======================
    - name: "🎨 应用自定义配置"
      run: |
        cd source
        
        # 复制配置文件
        CONFIG_FILE="../config-repo/${{ github.event.inputs.config_profile }}"
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 错误: 配置文件不存在: $CONFIG_FILE"
          exit 1
        fi
        
        cp "$CONFIG_FILE" .config
        echo "✅ 配置文件应用完成: ${{ github.event.inputs.config_profile }}"

    - name: "🛠️ 执行自定义脚本"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd source
        SCRIPTS_DIR="../config-repo/custom-features/scripts"
        
        # 执行diy2.sh脚本
        if [ -f "$SCRIPTS_DIR/diy2.sh" ]; then
          echo "执行 diy2.sh 脚本..."
          chmod +x "$SCRIPTS_DIR/diy2.sh"
          bash "$SCRIPTS_DIR/diy2.sh"
          echo "✅ diy2.sh 执行完成"
        else
          echo "⚠️ 未找到 diy2.sh 脚本"
        fi
        
        # 执行其他脚本
        for script in "$SCRIPTS_DIR"/*.sh; do
          if [ "$script" != "$SCRIPTS_DIR/diy2.sh" ] && [ -f "$script" ]; then
            echo "执行脚本: $(basename "$script")"
            chmod +x "$script"
            bash "$script" || echo "⚠️ 脚本执行失败: $script"
          fi
        done

    - name: "📦 集成预编译IPK"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd source
        IPK_DIR="../config-repo/custom-features/prebuilt-ipks"
        
        if [ -d "$IPK_DIR" ] && [ "$(ls -A "$IPK_DIR"/*.ipk 2>/dev/null)" ]; then
          echo "发现预编译IPK文件，创建自动安装器..."
          
          # 创建IPK自动安装器包
          mkdir -p package/utils/auto-ipk-installer
          cat > package/utils/auto-ipk-installer/Makefile << 'EOF'
include $(TOPDIR)/rules.mk

PKG_NAME:=auto-ipk-installer
PKG_VERSION:=1.0
PKG_RELEASE:=1

PKG_MAINTAINER:=Auto Installer
PKG_LICENSE:=MIT

include $(INCLUDE_DIR)/package.mk

define Package/auto-ipk-installer
  SECTION:=utils
  CATEGORY:=Utilities
  TITLE:=Auto IPK Installer
  DEPENDS:=+opkg
  PKGARCH:=all
endef

define Package/auto-ipk-installer/description
  Automatically installs prebuilt IPK packages during first boot.
endef

define Build/Compile
  true
endef

define Package/auto-ipk-installer/install
	$(INSTALL_DIR) $(1)/etc/init.d
	cat > $(1)/etc/init.d/auto-ipk-installer << 'SCRIPT'
#!/bin/sh /etc/rc.common
START=99
boot() {
    [ -f /tmp/ipk-installed ] && return 0
    echo "Starting automatic IPK installation..."
    sleep 10
    for ipk in /tmp/ipk-packages/*.ipk; do
        [ -f "$ipk" ] && opkg install "$ipk" && rm -f "$ipk"
    done
    rmdir /tmp/ipk-packages 2>/dev/null || true
    touch /tmp/ipk-installed
}
SCRIPT
	chmod +x $(1)/etc/init.d/auto-ipk-installer
	$(INSTALL_DIR) $(1)/etc/rc.d
	ln -sf ../init.d/auto-ipk-installer $(1)/etc/rc.d/S99auto-ipk-installer
endef

$(eval $(call BuildPackage,auto-ipk-installer))
EOF
          
          # 复制IPK文件到文件系统
          mkdir -p files/tmp/ipk-packages
          cp "$IPK_DIR"/*.ipk files/tmp/ipk-packages/ 2>/dev/null || true
          
          echo "✅ 预编译IPK文件集成完成"
        else
          echo "ℹ️ 未找到预编译IPK文件"
        fi

    # ======================
    # 阶段4：编译过程
    # ======================
    - name: "🏗️ 编译固件"
      timeout-minutes: ${{ env.BUILD_TIMEOUT }}
      run: |
        cd source
        
        # 计算并行任务数
        BUILD_JOBS=$(( $(nproc) - 1 ))
        [ $BUILD_JOBS -lt 1 ] && BUILD_JOBS=1
        echo "使用并行任务数: $BUILD_JOBS"
        
        START_TIME=$(date +%s)
        
        echo "开始编译过程..."
        make defconfig
        make download -j${BUILD_JOBS} || make download -j1 V=s
        make -j${BUILD_JOBS} || make -j1 V=s
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "✅ 编译完成! 耗时: ${DURATION}秒"

    # ======================
    # 阶段5：输出处理
    # ======================
    - name: "📦 收集构建产物"
      run: |
        cd source
        echo "收集编译输出文件..."
        
        # 查找固件文件
        FIRMWARE_FILES=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10)
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "生成的固件文件:"
          echo "$FIRMWARE_FILES"
        else
          echo "⚠️ 未找到标准固件文件"
        fi
        
        # 创建构建信息
        cat > ../build-info.md << EOF
# 构建信息
- 源码: ${{ env.SOURCE_URL }}
- 分支: ${{ env.SOURCE_BRANCH }}
- 配置: ${{ github.event.inputs.config_profile }}
- 时间: $(date)
- 时长: ${DURATION}秒
EOF

        # 准备产物
        mkdir -p ../artifacts
        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true
        cp ../build-info.md ../artifacts/

    - name: "💾 上传构建产物"
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}"
        path: artifacts/
        retention-days: 30

    - name: "📊 构建报告"
      if: always()
      run: |
        echo "=== 构建报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 构建成功!"
        else
          echo "❌ 构建失败"
        fi